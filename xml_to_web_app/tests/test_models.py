#!/usr/bin/env python3
"""
Script de test pour les mod√®les de donn√©es.
V√©rifie le bon fonctionnement des classes Project et XMLData.
"""

import sys
import tempfile
from pathlib import Path
from datetime import datetime

# Ajout du chemin pour importer les mod√®les
sys.path.insert(0, str(Path(__file__).parent))

from models import Project, XMLData, ProjectValidationError, XMLDataError


def test_project_basic():
    """Test des fonctionnalit√©s de base de la classe Project."""
    print("=== Test Project - Fonctionnalit√©s de base ===")
    
    # Cr√©ation d'un projet simple
    project = Project(name="Mon Premier Projet", description_html="<p>Description du projet</p>")
    
    print(f"Projet cr√©√©: {project}")
    print(f"Nom nettoy√©: {project.name}")
    print(f"Aper√ßu: {project.get_preview_text()}")
    print(f"Est vide: {project.is_empty()}")
    
    # Test de mise √† jour
    project.update_content("<h1>Nouveau contenu</h1><p>Avec plus de d√©tails</p>")
    print(f"Apr√®s mise √† jour: {project.get_preview_text()}")
    
    print("‚úì Test de base r√©ussi\n")


def test_project_xml_serialization():
    """Test de la s√©rialisation XML de Project."""
    print("=== Test Project - S√©rialisation XML ===")
    
    # Cr√©ation d'un projet avec du HTML
    original = Project(
        name="Projet Test XML",
        description_html="<h1>Titre</h1><p>Description avec <strong>HTML</strong></p>"
    )
    
    # Conversion en XML
    xml_string = original.to_xml_string()
    print("XML g√©n√©r√©:")
    print(xml_string)
    
    # Reconstruction depuis XML
    reconstructed = Project.from_xml_string(xml_string)
    
    # V√©rification
    assert original.name == reconstructed.name
    assert original.description_html == reconstructed.description_html
    
    print(f"Original: {original}")
    print(f"Reconstruit: {reconstructed}")
    print("‚úì S√©rialisation XML r√©ussie\n")


def test_project_validation():
    """Test de la validation des projets."""
    print("=== Test Project - Validation ===")
    
    try:
        # Test nom vide
        Project(name="", description_html="contenu")
        assert False, "Devrait lever une exception pour nom vide"
    except ValueError:
        print("‚úì Validation nom vide OK")
    
    try:
        # Test nom avec caract√®res sp√©ciaux
        project = Project(name="Projet & Sp√©cial!", description_html="contenu")
        print(f"‚úì Nom nettoy√©: '{project.name}'")
    except Exception as e:
        print(f"‚úó Erreur inattendue: {e}")
    
    print("‚úì Tests de validation r√©ussis\n")


def test_xml_data_from_string():
    """Test de XMLData avec une cha√Æne XML."""
    print("=== Test XMLData - Depuis cha√Æne ===")
    
    xml_content = """<?xml version="1.0" encoding="utf-8"?>
    <data>
        <item project="projet_a">Donn√©es pour projet A</item>
        <item project="projet_b">Donn√©es pour projet B</item>
        <description>R√©f√©rence √† project_c dans le texte</description>
    </data>"""
    
    xml_data = XMLData.from_string(xml_content)
    
    print(f"XML Data: {xml_data}")
    print(f"Valide: {xml_data.is_valid}")
    print(f"Projets r√©f√©renc√©s: {xml_data.get_project_references()}")
    
    # Test des statistiques
    stats = xml_data.get_statistics()
    print(f"Statistiques: {stats}")
    
    print("‚úì Test XMLData depuis cha√Æne r√©ussi\n")


def test_xml_data_from_file():
    """Test de XMLData avec un fichier temporaire."""
    print("=== Test XMLData - Depuis fichier ===")
    
    xml_content = """<?xml version="1.0" encoding="utf-8"?>
    <projects>
        <project id="web_app" status="active">
            <name>Application Web</name>
            <reference>Utilise project_framework</reference>
        </project>
        <project id="mobile_app" status="planning">
            <name>Application Mobile</name>
            <reference>Bas√© sur project_framework</reference>
        </project>
    </projects>"""
    
    # Cr√©e un fichier temporaire
    with tempfile.NamedTemporaryFile(mode='w', suffix='.xml', delete=False, encoding='utf-8') as f:
        f.write(xml_content)
        temp_file = f.name
    
    try:
        xml_data = XMLData.from_file(temp_file)
        
        print(f"Fichier: {xml_data.file_path}")
        print(f"Valide: {xml_data.is_valid}")
        print(f"Encodage: {xml_data.encoding}")
        print(f"Projets r√©f√©renc√©s: {xml_data.get_project_references()}")
        
        # Test du rapport de validation
        report = xml_data.get_validation_report()
        print("Rapport de validation:")
        print(report)
        
    finally:
        # Nettoyage du fichier temporaire
        Path(temp_file).unlink()
    
    print("‚úì Test XMLData depuis fichier r√©ussi\n")


def test_xml_data_project_analysis():
    """Test de l'analyse des projets dans XMLData."""
    print("=== Test XMLData - Analyse des projets ===")
    
    xml_content = """<?xml version="1.0" encoding="utf-8"?>
    <data>
        <section project_ref="projet_a">Section A</section>
        <section project_ref="projet_b">Section B</section>
        <content>Mention de project_c dans le texte</content>
    </data>"""
    
    xml_data = XMLData.from_string(xml_content)
    
    # Liste des projets disponibles (simul√©e)
    available_projects = ["projet_a", "projet_d", "projet_e"]
    
    print(f"Projets r√©f√©renc√©s: {xml_data.get_project_references()}")
    print(f"Projets disponibles: {available_projects}")
    print(f"Projets manquants: {xml_data.get_missing_projects(available_projects)}")
    print(f"Projets non utilis√©s: {xml_data.get_unused_projects(available_projects)}")
    
    # Test de r√©f√©rences sp√©cifiques
    print(f"Projet 'projet_a' r√©f√©renc√©: {xml_data.has_project_reference('projet_a')}")
    print(f"Projet 'projet_inexistant' r√©f√©renc√©: {xml_data.has_project_reference('projet_inexistant')}")
    
    print("‚úì Test analyse des projets r√©ussi\n")


def test_xml_data_validation_errors():
    """Test de la gestion des erreurs de validation XMLData."""
    print("=== Test XMLData - Erreurs de validation ===")
    
    # Test XML malform√©
    invalid_xml = "<data><item>Test non ferm√©"
    xml_data = XMLData.from_string(invalid_xml)
    
    print(f"XML invalide - Valide: {xml_data.is_valid}")
    print(f"Erreurs: {xml_data.validation_errors}")
    
    # Test XML vide
    empty_xml_data = XMLData.from_string("")
    print(f"XML vide - Valide: {empty_xml_data.is_valid}")
    print(f"Erreurs: {empty_xml_data.validation_errors}")
    
    # Test XML valide mais simple
    simple_xml = "<root><item>Simple</item></root>"
    simple_xml_data = XMLData.from_string(simple_xml)
    print(f"XML simple - Valide: {simple_xml_data.is_valid}")
    
    print("‚úì Test erreurs de validation r√©ussi\n")


def test_projects_collection():
    """Test de la gestion d'une collection de projets."""
    print("=== Test Collection de projets ===")
    
    # Cr√©ation de plusieurs projets
    projects = [
        Project(name="Site Web", description_html="<h1>Site Web Corporate</h1><p>Description d√©taill√©e</p>"),
        Project(name="App Mobile", description_html="<h1>Application Mobile</h1><p>Pour iOS et Android</p>"),
        Project(name="API REST", description_html="<h1>API REST</h1><p>Backend pour les applications</p>")
    ]
    
    print("Projets cr√©√©s:")
    for project in projects:
        print(f"  - {project.name}: {project.get_preview_text(50)}")
    
    # Simulation de sauvegarde XML collective
    import xml.etree.ElementTree as ET
    
    root = ET.Element("projects")
    for project in projects:
        root.append(project.to_xml_element())
    
    # Indentation pour lisibilit√©
    def indent_xml(elem, level=0):
        i = "\n" + level * "  "
        if len(elem):
            if not elem.text or not elem.text.strip():
                elem.text = i + "  "
            if not elem.tail or not elem.tail.strip():
                elem.tail = i
            for child in elem:
                indent_xml(child, level + 1)
            if not child.tail or not child.tail.strip():
                child.tail = i
        else:
            if level and (not elem.tail or not elem.tail.strip()):
                elem.tail = i
    
    indent_xml(root)
    
    xml_string = ET.tostring(root, encoding='unicode', method='xml')
    print("\nXML collection g√©n√©r√©:")
    print(xml_string)
    
    # Test de reconstruction
    reconstructed_projects = []
    for project_elem in root.findall('project'):
        reconstructed_projects.append(Project.from_xml_element(project_elem))
    
    print(f"\nProjets reconstruits: {len(reconstructed_projects)}")
    for project in reconstructed_projects:
        print(f"  - {project.name}")
    
    print("‚úì Test collection de projets r√©ussi\n")


def run_all_tests():
    """Ex√©cute tous les tests."""
    print("üß™ D√âBUT DES TESTS DES MOD√àLES DE DONN√âES")
    print("=" * 50)
    
    try:
        test_project_basic()
        test_project_xml_serialization()
        test_project_validation()
        test_xml_data_from_string()
        test_xml_data_from_file()
        test_xml_data_project_analysis()
        test_xml_data_validation_errors()
        test_projects_collection()
        
        print("üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
        
    except Exception as e:
        print(f"‚ùå ERREUR DANS LES TESTS: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True


def demo_usage():
    """D√©monstration d'utilisation des mod√®les."""
    print("\n" + "=" * 50)
    print("üìã D√âMONSTRATION D'UTILISATION")
    print("=" * 50)
    
    # Cr√©ation d'un projet
    print("1. Cr√©ation d'un projet:")
    project = Project(
        name="Site E-commerce",
        description_html="""
        <h1>Site E-commerce</h1>
        <p>D√©veloppement d'une plateforme de vente en ligne moderne.</p>
        <h2>Fonctionnalit√©s</h2>
        <ul>
            <li>Catalogue produits</li>
            <li>Panier d'achat</li>
            <li>Paiement s√©curis√©</li>
        </ul>
        """
    )
    print(f"  Projet: {project.name}")
    print(f"  Aper√ßu: {project.get_preview_text(80)}")
    
    # Simulation de donn√©es XML
    print("\n2. Chargement de donn√©es XML:")
    xml_sample = """<?xml version="1.0" encoding="utf-8"?>
    <database_export>
        <table name="projects">
            <row project_id="site_e_commerce">
                <column name="status">active</column>
                <column name="budget">50000</column>
            </row>
        </table>
        <references>
            <ref>Projet site_e_commerce n√©cessaire</ref>
        </references>
    </database_export>"""
    
    xml_data = XMLData.from_string(xml_sample)
    print(f"  Statut: {'‚úì Valide' if xml_data.is_valid else '‚úó Invalide'}")
    print(f"  Projets trouv√©s: {xml_data.get_project_references()}")
    
    # Analyse de coh√©rence
    print("\n3. Analyse de coh√©rence:")
    available_projects = [project.name]
    missing = xml_data.get_missing_projects(available_projects)
    unused = xml_data.get_unused_projects(available_projects)
    
    print(f"  Projets disponibles: {available_projects}")
    print(f"  Projets manquants: {missing}")
    print(f"  Projets non utilis√©s: {unused}")
    
    print("\n‚ú® D√©monstration termin√©e!")


if __name__ == "__main__":
    success = run_all_tests()
    
    if success:
        demo_usage()
    
    sys.exit(0 if success else 1)